syntax="proto3";

//package example;
//package resonate.api.user;
package user;

//option go_package = "user";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "user/common.proto";
import "user/user_messages.proto";
import "user/usergroup_messages.proto";

// Defines the import path that should be used to import the generated package,
// and the package name.
option go_package = "github.com/resonatecoop/user-api/proto/user";

// These annotations are used when generating the OpenAPI file.
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    version: "2.0.2";
    title: "Resonate Service Documentation: User";
  };
  external_docs: {
    url: "https://github.com/resonatecoop/user-api";
    description: "gRPC-gateway resonate-user-api repository";
  }
  security_definitions: {
    security: {
      key: "bearer"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "Authorization"
        description: "Authentication token, prefixed by Bearer: Bearer <token>"
      }
    }
  }
  security: {
    security_requirement: {
      key: "bearer"
    }
  }
  schemes: HTTPS;
};

service ResonateUser {

  // Users

  //GetUser provides a public level of information about a user
  rpc GetUser(UserRequest) returns (UserPublicResponse) {
    option (google.api.http) = {
      // Route to this method from GET requests to /api/v1/user/{id}
      get: "/api/v1/user/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get a user"
      description: "Get a user's public information from the server."
      tags: "Users"
    };
  }

  //rpc AddUser(UserAddRequest) returns (User) {
  rpc AddUser(UserAddRequest) returns (UserRequest) {
    option (google.api.http) = {
      // Route to this method from POST requests to /api/v1/users
      post: "/api/v1/users"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Add a user"
      description: "Add a user to the server."
      tags: "Users"
    };
  }

  //rpc UpdateUser(UserUpdateRequest) returns (Empty) {
  rpc UpdateUser(UserUpdateRequest) returns (Empty) {
    option (google.api.http) = {
      // Route to this method from PUT requests to /api/v1/user
      patch: "/api/v1/user/{id}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update a user"
      description: "Update an existing user record on the server."
      tags: "Users"
    };
  }

  //rpc UpdateUserRestricted(UserUpdateRestrictedRequest) returns (Empty) {
  rpc UpdateUserRestricted(UserUpdateRestrictedRequest) returns (Empty) {
    option (google.api.http) = {
      // Route to this method from PUT requests to /api/v1/user
      patch: "/api/v1/restricted/user/{id}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update a user record for admins"
      description: "Update an existing user record on the server including restricted information."
      tags: "Users"
    };
  }

  // //rpc ResetUserPassword(AddUserRequest) returns (Empty) {
  // rpc ResetUserPassword(ResetUserPasswordRequest) returns (Empty) {
  //   option (google.api.http) = {
  //     // Route to this method from PUT requests to /api/v1/account
  //     put: "/api/v1/account/password"
  //     body: "*"
  //   };
  //   option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
  //     summary: "Update a user's password"
  //     description: "Update an existing user's password on the server."
  //     tags: "Users Password"
  //   };
  // }

  //GetUserRestricted provides private level of information about a user
  rpc GetUserRestricted(UserRequest) returns (UserPrivateResponse) {
    option (google.api.http) = {
      // Route to this method from GET requests to /api/v1/restricted/user/{id}
      get: "/api/v1/restricted/user/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get a user's restricted information"
      description: "Get user profile from the server including private information."
      tags: "Users"
    };
  }

  rpc GetUserMembership(UserRequest) returns (UserMembershipResponse) {
    option (google.api.http) = {
      get: "/api/v1/user/{id}/membership"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get user membership"
      description: "Get user membership."
      tags: "Membership"
    };
  }

  rpc GetUserCredits(UserRequest) returns (UserCreditResponse) {
    option (google.api.http) = {
      get: "/api/v1/user/{id}/credits"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get user credits"
      description: "Get user credits."
      tags: "Users"
    };
  }
  
  rpc DeleteUser(UserRequest) returns (Empty) {
    option (google.api.http) = {
      // Route to this method from DELETE requests to /api/v1/restricted/user/{id}
      delete: "/api/v1/restricted/user/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete user"
      description: "Delete a user from the server."
      tags: "Users"
    };
  }

  //ListUsers returns a list of all Users
  rpc ListUsers(Empty) returns (UserListResponse) {
    option (google.api.http) = {
      // Route to this method from GET requests to /api/v1/users
      get: "/api/v1/users"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List users"
      description: "List all users on the server."
      tags: "Users"
    };
  }

  // UserGroups

  //AddUserGroup adds a UserGroup based on provided attributes
  rpc AddUserGroup(UserGroupCreateRequest) returns (UserRequest) {
    option (google.api.http) = {
      // Route to this method from POST requests to /api/v1/users/{id}/usergroup
      post: "/api/v1/users/{id}/usergroup"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Add a user group"
      description: "Add a user group to the server to user resource with id: id."
      tags: "Usergroups"
    };
  }

  //UpdateUserGroup updates an existing UserGroup
  rpc UpdateUserGroup(UserGroupUpdateRequest) returns (Empty) {
    option (google.api.http) = {
      // Route to this method from PUT requests to /api/v1/user
      patch: "/api/v1/usergroup/{id}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update a user group"
      description: "Update an existing user group record on the server."
      tags: "Usergroups"
    };
  }

  //rpc UpdateUserRestricted(UpdateUserRestrictedRequest) returns (Empty) {
  // rpc UpdateUserRestricted(UpdateUserRestrictedRequest) returns (Empty) {
  //   option (google.api.http) = {
  //     // Route to this method from PUT requests to /api/v1/user
  //     patch: "/api/v1/restricted/user/{id}"
  //     body: "*"
  //   };
  //   option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
  //     summary: "Update a user record for admins"
  //     description: "Update an existing user record on the server including restricted information."
  //     tags: "Users"
  //   };
  // }

  //rpc ResetUserPassword(AddUserRequest) returns (Empty) {
  // rpc ResetUserPassword(ResetUserPasswordRequest) returns (Empty) {
  //   option (google.api.http) = {
  //     // Route to this method from PUT requests to /api/v1/account
  //     put: "/api/v1/account/password"
  //     body: "*"
  //   };
  //   option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
  //     summary: "Update a user's password"
  //     description: "Update an existing user's password on the server."
  //     tags: "Users Password"
  //   };
  // }

  //GetUserGroup provides a public level of information about a user group
  rpc GetUserGroup(UserGroupRequest) returns (UserGroupPublicResponse) {
    option (google.api.http) = {
      // Route to this method from GET requests to /api/v1/usergroup/{id}
      get: "/api/v1/usergroup/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get a user group"
      description: "Get a usergroup from the server."
      tags: "Usergroups"
    };
  }

  //GetUserRestricted provides private level of information about a user
  // rpc GetUserRestricted(UserRequest) returns (UserPrivateResponse) {
  //   option (google.api.http) = {
  //     // Route to this method from GET requests to /api/v1/restricted/user/{id}
  //     get: "/api/v1/restricted/user/{id}"
  //   };
  //   option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
  //     summary: "Get a user's restricted information"
  //     description: "Get user profile from the server including private information."
  //     tags: "Users"
  //   };
  // }

  //DeleteUserGroup deletes a UserGroup
  rpc DeleteUserGroup(UserGroupRequest) returns (Empty) {
    option (google.api.http) = {
      // Route to this method from DELETE requests to /api/v1/restricted/user/{id}
      delete: "/api/v1/usergroup/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete usergroup"
      description: "Delete a usergroup from the server."
      tags: "Usergroups"
    };
  }

  rpc ListUsersUserGroups(UserRequest) returns (UserGroupListResponse) {
    option (google.api.http) = {
      // Route to this method from GET requests to /api/v1/users/{id}/usergroups
      get: "/api/v1/users/{id}/usergroups"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get a list of users groups"
      description: "Get a list of users groups owned by user from server"
      tags: "Usergroups"
    };
  }

  // rpc CreateUserGroup(UserGroupCreateRequest) returns (UserGroupPrivateResponse);
  // rpc GetUserGroup(UserGroupRequest) returns (UserGroupPublicResponse);
  // // rpc GetUserGroupRestricted(UserGroupRequest) returns (UserGroupPrivateResponse);
  // rpc UpdateUserGroup(UserGroupUpdateRequest) returns (UserGroupPrivateResponse);
  // rpc DeleteUserGroup(UserGroupRequest) returns (Empty);

  // rpc GetChildUserGroups(UserGroupRequest) returns (GroupedUserGroups);
  // rpc GetParentUserGroups(UserGroupRequest) returns (GroupedUserGroups);

  // rpc GetLabelUserGroups(UserGroupRequest) returns (GroupedUserGroups);
  // rpc GetUserGroupTypes(Empty) returns (GroupTaxonomies);

  // //rpc AddRecommended(UserGroupRecommended) returns (Empty);
  // //rpc RemoveRecommended(UserGroupRecommended) returns (Empty);

  // rpc AddMember(UserGroupMembershipRequest) returns (Empty);
  // rpc DeleteMember(UserGroupMembershipRequest) returns (Empty);

  // rpc SearchUserGroups(Query) returns (SearchResults);
}




